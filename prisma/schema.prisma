generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String     @unique
  phoneNumber  String     @unique
  profileImage String?
  password     String?
  fcmToken     String?
  googleId     String?    @unique
  facebookId   String?    @unique
  deviceToken  String?
  points       Int        @default(0)
  badge        String?
  role         UserRole   @default(USER)
  status       UserStatus @default(INACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  starrd       Starrd[]
  category     Category[]
  subcategory  Subcategory[]

  @@map("Users")
}

model PointsLevel {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  points       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("PointsLevels")
}
 model Milestone {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  points       Int       @default(0)
  badge        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("Milestones")
}

model Starrd{
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  categoryId    String
  subcategoryId String
  personalNote  String
  location      String
  rating        Int
  socialLink    String?
  uploadFiles   String[]
  userId        String     @db.ObjectId
  shopId        String?     @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User       @relation(fields: [userId], references: [id])
  subcategory   Subcategory[]
  category      Category[]

  @@map("Starrds")
}

model Category {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  userId        String     @db.ObjectId
  starrdId      String?    @db.ObjectId
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  subcategoryId String?     @db.ObjectId
  subcategory   Subcategory[]
  user          User       @relation(fields: [userId], references: [id])
  starrd        Starrd?    @relation(fields: [starrdId], references: [id])

  @@map("Categories")
}
model Subcategory {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  categoryId   String     @db.ObjectId
  userId       String     @db.ObjectId
  starrdId     String?    @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  starrd       Starrd?    @relation(fields: [starrdId], references: [id])
  category     Category   @relation(fields: [categoryId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@map("Subcategories")
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}
